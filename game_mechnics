### Jiaxin Ge
### 58153795
### Columns_game_mechanics

import collections

NONE = 0

GameState = collections.namedtuple('GameState', ['board', 'row', 'column'])

class InvalidMovementError(Exception):
    '''
    Raised whenever an invalid move is made
    '''
    pass


class GameOverError(Exception):
    '''
    Raise when the game is already over
    '''
    pass


class ColumnState():
    '''
    The class of column game
    '''

    def __init__(self, row, column) -> None:
        '''
        set up the row, column, board, faller list, and following unit row and unit column of the game
        '''
        self._row = row
        self._column = column
        self._board = []
        self._faller_list = []
        self._unit_row = 100
        self._unit_col = 100


    ### public method

    def new_game(self) -> list:
        '''
        create a new game board
        '''
        game_board = []
        for col in range(self._column):
            self._board.append([])
            for row in range(self._row):
                self._board[-1].append(NONE)
        return self._board
        

    def row(self) -> int:
        '''
        return the row of the board
        '''
        return self._row


    def column(self) -> int:
        '''
        return the column of the board
        '''
        return self._column


    def board(self) -> [list]:
        '''
        return the board list
        '''
        return self._board


    def drop(self) -> None:
        '''
        drop the faller for one time
        '''
        for col in range(self._column):
            item_row = self._find_item_row (col)
            freeze_row = self._find_freeze_row(col)
            
            if item_row == 0 and self._board[col][item_row+1] != NONE :
                self._freeze (col)
                break
            
            if freeze_row != -1:
                self._fix(col)
                self._check_game_over()
                break

            if item_row != -1:
                column_not_empty = self._check_next_roll_empty (item_row, col)
                new_board = self._copy_game_board ()
                for row in range(item_row + 1, -1, -1):
                    self._board [col][row] = new_board[col][row - 1]
                self._board [col][row] = NONE
                self._check_faller(self._faller_list[-1], col)
                if column_not_empty == True:    
                   self._freeze (col)


    def content_init(self) -> None:
        '''
        initiate the content command: put every input into the board
        '''
        for row in range(self._row):
            str_input = input()
            for column in range(self._column):
                if str_input[column] == " ":
                    self._board[column][row] = NONE
                else:
                    self._board[column][row] = " " + str_input[column] + " "


    def content_drop(self) -> None:
        '''
        drop all the item to the bottom after the initiation in content command
        '''
        for col in range(self._column):
            for row in range(self._row-1, -1, -1):
                if self._board[col][row] != NONE:
                    self._exchange_item_row_to_the_bottom(row, col)
            
            
    def rotate(self)  -> None:
        '''
        rotate the falling column: switch the bottom color to the top
        '''
        for col in range(self._column):
            
            item_row = self._find_item_row (col)
            freeze_row = self._find_freeze_row(col)
            
            if item_row!= -1:
                new_board = self._copy_game_board ()
                for row in range(item_row, item_row -3, -1):
                    if row == item_row -2:
                        self._board[col][row] = new_board[col][item_row]
                    else:
                        self._board[col][row] = new_board[col][row -1]
                        
                self._faller_list.append([self._board[col][item_row -2], self._board[col][item_row -1], self._board[col][item_row]])

            if freeze_row == self._row - 1:
                self._rotate_when_the_faller_land(freeze_row, col)
                
            
    def F_command_init(self, last_element: str, falling_column: int, faller_list: list) -> None:
        '''
        the initiation of F command: show the last color to the board
        '''
        self._board[falling_column][0] = self._get_faller_sign(last_element)
        self._faller_list.append(faller_list)

    
    def move_to_right(self) -> None:
        '''
        move the falling column to the right
        '''
        try:
            for col in range(self._column):
                item_row = self._find_item_row (col)
                freeze_row = self._find_freeze_row(col)
                if item_row != -1:               
                    self._check_right_row_valid(item_row, col)
                    new_board = self._copy_game_board ()
                    for row in range(item_row, item_row -3, -1):
                        self._board [col + 1][row] = new_board[col][row]               
                        self._board [col][row] = NONE
                    break
                
                if freeze_row == self._row - 1:
                    self._check_right_row_valid(freeze_row, col)
                    self._move_to_right_when_landed(freeze_row, col)
                    break
        except InvalidMovementError:
            pass


    def move_to_left(self) -> None:
        '''
        move the falling column to the left
        '''
        try:
            for col in range(self._column):
                item_row = self._find_item_row (col)
                freeze_row = self._find_freeze_row(col)
                if item_row != -1:
                    
                    self._check_left_row_valid(item_row, col)

                    new_board = self._copy_game_board ()

                    for row in range(item_row, item_row -3, -1):
                        self._board [col -1][row] = new_board[col][row]               
                        self._board [col][row] = NONE
                    break

                if freeze_row == self._row - 1:
                    self._check_left_row_valid(freeze_row, col)
                    self._move_to_left_when_landed(freeze_row, col)
                    break

        except InvalidMovementError:
            pass


    def print_game_board(self) -> None:
        '''
        print the board of the game
        '''
        for a in range (self._row):
            for b in range (self._column):
                if b == 0:
                    print ("|", end = "")
                                      
                if self._board[b][a] == NONE:
                    print ("   ", end = "")                            
                else:
                    print(self._board[b][a], end = "")
                    
                if b == self._column-1:
                    print ("|")
        print (" " + "-" * self._column * 3 + " ")


    def eliminate(self) -> None:
        '''
        eliminate asterisk item in the board and drop the item
        '''
        for col in range(self._column):
            for row in range(self._row):
                if "*" in str (self._board[col][row]):
                    self._board[col][row] = NONE
                    self.content_drop()


    def asterisk(self) -> bool:
        '''
        exchange the color with more than three into asterisk color
        '''

        for col in range(self._column):
            for row in range(self._row):
                if self._eliminate_sequence_begins_at(col, row):
                    self._change_to_asterisk(col, row)
        return False

    
    #### private

    def _check_game_over(self) -> None:
        '''
        find out if the game is over
        '''
        for col in range (self._column):
            game_over = True
            for row in range(self._row):
                if self._board[col][row] == NONE:
                    game_over = False  
            if game_over == True:
                raise GameOverError


    def _change_to_asterisk(self, col: int, row: int) -> None:
        '''
        determine if the color match and change color to asterisk color
        '''
        i = 0  
        start_unit = self._board[col][row]
        
        while self._is_valid_column_number(col + self._unit_col * i) and self._is_valid_row_number(row + self._unit_row * i) \
                and self._change_to_fix_sign (self._board[col][row]) == self._board [col + self._unit_col *i][row + self._unit_row * i] :

            self._board [col + self._unit_col *i][row + self._unit_row * i] = self._change_to_asterisk_sign (self._board [col + self._unit_col *i][row + self._unit_row * i])
            i += 1
    

    def _eliminate_sequence_begins_at(self, col: int, row: int) -> bool:
        '''
        Returns True if the color sequence of pieces appears on the board
        beginning in the given column and row and extending in any of the
        eight possible directions; returns False otherwise
        '''
        return self._three_in_a_row(col, row, 0, 1) \
                or self._three_in_a_row(col, row, 1, 1) \
                or self._three_in_a_row(col, row, 1, 0) \
                or self._three_in_a_row(col, row, 1, -1) \
                or self._three_in_a_row(col, row, 0, -1) \
                or self._three_in_a_row(col, row, -1, -1) \
                or self._three_in_a_row(col, row, -1, 0) \
                or self._three_in_a_row(col, row, -1, 1)
        

    def _three_in_a_row(self, col: int, row: int, unit_col: int, unit_row: int) -> bool:
        '''
        Returns True if a color sequence of pieces appears on the board
        beginning in the given column and row and extending in a direction
        specified by the coldelta and rowdelta
        '''
        start_unit = self._board[col][row]

        if start_unit == NONE:
            return False
        else:
            for i in range(1, 3):
                if not self._is_valid_column_number(col + unit_col * i) \
                        or not self._is_valid_row_number(row + unit_row * i) \
                        or self._board[col + unit_col *i][row + unit_row * i] != start_unit:
                    return False

            self._unit_row = unit_row
            self._unit_col = unit_col
            return True

    
    def _is_valid_column_number(self, column_number: int) -> bool:
        '''Returns True if the given column number is valid; returns False otherwise'''
        return 0 <= column_number < self._column


    def _is_valid_row_number(self, row_number: int) -> bool:
        '''Returns True if the given row number is valid; returns False otherwise'''
        return 0 <= row_number < self._row


    def _change_to_asterisk_sign(self, faller_color: str) -> str:
        '''
        return the color to asterisk sign
        '''
        return "*" + faller_color[1] + "*"
        
    
    def _exchange_item_row_to_the_bottom(self, current_row: int, current_col: int) -> None:
        '''
        drop color to the bottom and exchange it with bottom NONE
        '''
        for row in range(self._row-1, current_row, -1):
            if self._board[current_col][row] == NONE:
                new_board = self._copy_game_board ()
                self._board [current_col][current_row] = new_board [current_col][row]
                self._board [current_col][row] = new_board [current_col][current_row]
                break


    def _check_left_row_valid(self, item_row: int, current_column: int) -> None:
        '''
        check if the row can move to the left; if not, raise exception
        '''
        if current_column == 0:
            raise InvalidMovementError()

        for row in range (item_row, item_row -3, -1):
            if self._board[current_column -1][row] != NONE:
                raise InvalidMovementError()


    def _check_right_row_valid(self, item_row: int, current_column: int) -> None:
        '''
        check if the row can move to the right; if not, raise exception
        '''
        if current_column == self._column -1:
            raise InvalidMovementError()
        
        for row in range (item_row, item_row -3, -1):
            if self._board[current_column +1][row] != NONE:
                raise InvalidMovementError()
        

    def _fix(self, current_column: int) -> None:
        '''
        make the falling column to fix column
        '''
        for row in range (self._row):
            if "|" in str (self._board[current_column][row]):
                self._board[current_column][row] = self._change_to_fix_sign(self._board[current_column][row])

    
    def _rotate_when_the_faller_land(self, freeze_row: int, col: int) -> None:
        '''
        rotate when the faller is landed
        '''
        new_board = self._copy_game_board ()
        for row in range(freeze_row, freeze_row -3, -1):
            if row == freeze_row -2:
                self._board[col][row] = new_board[col][freeze_row]
            else:
                self._board[col][row] = new_board[col][row -1]
                
        self._faller_list.append([self._board[col][freeze_row -2], self._board[col][freeze_row -1], self._board[col][freeze_row]])
    
    
    def _copy_game_board(self) -> list:
        '''
        Copies the given game board
        '''
        board_copy = []
        
        for col in range(self._column):
            board_copy.append([])
            for row in range(self._row):
                board_copy[-1].append(self._board[col][row])

        return board_copy


    def _find_item_row(self, column_number: int) -> int:
        '''
        find the bottom-most falling color and return is row
        '''
        item_row = -1
        for i in range(self._row):
            if "[" in str (self._board [column_number][i]):
                item_row = i
        return item_row


    def _check_next_roll_empty(self, item_row: int, current_colomn: int) -> bool:
        '''
        check if the next roll is empty
        '''
        if item_row == self._row - 2:
            return True
        return self._board[current_colomn][item_row + 2] != NONE


    def _check_faller(self, faller: list, falling_column: int) -> None:
        '''
        check if the faller is in the board when falling command appear
        '''
        first_falling_color_row = -1
        for i in range(self._row - 1, -1, -1):
            if self._board[falling_column][i] == self._get_faller_sign(faller[2]):
                first_falling_color_row = i
                continue
            
        if not self._check_color(faller, falling_column, first_falling_color_row -2):
        
            if first_falling_color_row == 1:
                self._board[falling_column][0] = self._get_faller_sign(faller[1])
                
            elif first_falling_color_row == 2:
                self._board[falling_column][0] = self._get_faller_sign(faller[0])


    def _check_color(self, faller: list, falling_column: int, falling_color_row: int) -> bool:
        '''
        check if the color is in the board
        '''
        valid = True
        try:
            for i in range(3):
                for row in range (self._row):
                    if self._get_faller_sign (faller[i]) != self._board[falling_column][falling_color_row + i]:
                        valid = False       
            return valid
        
        except IndexError:
            return False
    
    
    def _find_freeze_row(self, column_number: int) -> int:
        '''
        find the bottom-most freeze color and return its row
        '''
        freeze_row = -1
        for i in range(self._row):
            if "|" in str (self._board [column_number][i]):
                freeze_row = i
        return freeze_row


    def _get_faller_sign(self, faller_element:str) -> str:
        '''
        return the color with faller sign
        '''
        return "[" + faller_element + "]"


    def _freeze (self, current_column: int) -> None:
        '''
        freeze the faller if it is at the bottom of the board
        '''
        for row in range (self._row):
            if "[" in str (self._board [current_column][row]):
                self._board [current_column][row] = self._change_to_freeze_sign(self._board [current_column][row])


    def _change_to_freeze_sign(self, falling_color: str) -> str:
        '''
        return the color with freeze sign
        '''
        color = falling_color[1]
        return "|" + color + "|"


    def _change_to_fix_sign(self, freezing_color: str) -> str:
        '''
        return the color with fix sign
        '''
        color = freezing_color[1]
        return " " + color + " "


    def _move_to_right_when_landed(self, freeze_row: int, col: int):
        '''
        move the faller to the right when the faller is landed
        '''
        new_board = self._copy_game_board ()

        for row in range(freeze_row, freeze_row -3, -1):
            self._board [col + 1][row] = new_board[col][row]               
            self._board [col][row] = NONE
            

    def _move_to_left_when_landed(self, freeze_row: int, col: int):
        '''
        move the faller to the left when the faller is landed
        '''
        new_board = self._copy_game_board ()

        for row in range(freeze_row, freeze_row -3, -1):
            self._board [col -1][row] = new_board[col][row]               
            self._board [col][row] = NONE
